# Run tests and if successfull and on main branch deploy to Render
name: Docker CI 

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      # JWT_SECRET will be provided as environment variable
      MONGODB_URI: mongodb://mongo:27017/pokemon_team_builder-dev
      PORT: 4000
      NODE_ENV: production
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        # create empty .env as env_file is not used in CI pipeline - injected env variables are used instead
      - name: Create empty .env file for CI
        run: touch .env

      - name: Build Prod image
        run: docker buildx build --target production -t pokemon-team-builder-api:${IMAGE_TAG:-latest} .

      - name: Run tests via docker-compose
        # Use same IMAGE_TAG for running tests to keep consistency
        # Export all required environment variables
        # Create a secure file to store the JWT secret temporarily
        run: |
          echo "${{ secrets.JWT_SECRET }}" > .jwt_secret
          export JWT_SECRET=$(cat .jwt_secret)
          rm .jwt_secret
          export MONGODB_URI="mongodb://mongo:27017/pokemon_team_builder-test"
          export PORT=4000
          export NODE_ENV=test
          export IMAGE_TAG="${{ github.sha }}"
          export API_BASE_URL="http://backend:4000"
          
          docker compose --profile test up --build --abort-on-container-exit --exit-code-from test

      - name: Trigger Render deployment on success
        # only trigger deployment when pushing to main branch
        if: success() && github.ref_name == 'main'
        run: curl -X POST ${{ secrets.RENDER_DEPLOYMENT_HOOK }}
        